<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from jssp.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="jssp" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>jssp</refname>
    <refpurpose>Solves the popular 'Job-Shop Scheduling Problem' (JSSP for short), which aims to find an optimal plan to schedule a given number of jobs, each composed of one or more tasks to be performed in some specific logical order, on a given number of machines. The routine makes use of the 'constraint-solver' library from the Google OR-Tools framework.</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   [makespan,schedule] = jssp(machines, jobs, jmode, tasks)
   [makespan, schedule] = jssp(machines, jobs, jmode, tasks, time_limit)
   [makespan, schedule, status] = jssp(machines, jobs, jmode, tasks)
   [makespan, schedule, status] = jssp(machines, jobs, jmode, tasks, time_limit)
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>machines :</term>
      <listitem><para> It is a single integral value specifying the total number of machines in the problem, on which the various tasks are to be scheduled.</para></listitem></varlistentry>
   <varlistentry><term>jobs :</term>
      <listitem><para> It is a single integral value  specifying the total number of jobs in the problem. Each job is composed of one or more tasks which are to be scheduled on specific machines, in some logical order.</para></listitem></varlistentry>
   <varlistentry><term>mode :</term>
      <listitem><para> It is a single intergral value (either '0' or '1' only). It specifies one of the two modes for the solver, which are :-<itemizedlist><listitem>0-> Sequential - In this mode, the various tasks within a job are considered to be sequentially constrained i.e. task_1 must occur before task_2, task_2 before task_3 and so on.</listitem><listitem>1-> Parallel - This mode allows the flexibility of some tasks being scheduled parallelly or independently of each other, if such a scenario is to be modelled. Eg. if a task 'x' can be performed any time after task_1 but must be performed before task_10. It requires 2 additional fields in the 'tasks' matrix, specifying 2 tasks (indices) between which the current task can be freely scheduled. One or both of these bounds can be done away with(no 'start_after' or 'end_before' constraints) by providing '-1' for the respective field.(These indices are the task indices WITHIN the job, ie.each job will have a task indexed '1', dor instance).</listitem></itemizedlist></para></listitem></varlistentry>
   <varlistentry><term>tasks :</term>
      <listitem><para> It is an [AxB] matrix( A- total number of tasks in the problem. B- 3 or 5 depending on the mode). Each row corresponds to a task. The two variations are :-<itemizedlist><listitem>mode '0' -> An [Ax3] matrix. The 3 fields/columns are 'Job-Index', 'Machine-Index' and 'Task-Duration'. (The tasks for each job are ordered internally in the order they appear in this matrix)</listitem><listitem>mode '1' -> An [Ax5] matrix. The 5 fields/columns are 'Job-Index, 'Machine-Index', 'Task-Duration', 'Start-After' and 'End-Before'. (order of the tasks doesn't matter in this case)</listitem></itemizedlist><latex>\text{}\\\text{}\\\\</latex>More on the columns (let the current task(row) be 'x')<itemizedlist><listitem>'job-index' -> It is the index of the job to which 'x' belongs.</listitem><listitem>'machine-index' -> It is the index of the machine on which 'x' is to be scheduled.</listitem><listitem>'task-duration' -> It is the time required to perform 'x'.</listitem><latex>\text{}\\\text{}\\\\</latex>Only for mode '1' -<listitem>'start-after' -> It is the index of the task, only after whose completion, 'x' can start.</listitem><listitem>'end-before' -> It is the index of the task that can only start once 'x' is completed.</listitem></itemizedlist></para></listitem></varlistentry>
   <varlistentry><term>time_limit :</term>
      <listitem><para> It is the  maximum time (in milliseconds; integral value) for which the solver is allowed to run. If a solution is not found by then, a pertinent 'timed-out' error occurs.(Default Value - 10 seconds). Provide an empty matrix or omit the parameter if explicit time-limit is not required.</para></listitem></varlistentry>
   <varlistentry><term>makespan :</term>
      <listitem><para> It is the total duration of the schedule in the optimal solution, if one exists.</para></listitem></varlistentry>
   <varlistentry><term>schedule :</term>
      <listitem><para> Is is an [Ax5] matrix (A- no. of tasks) that gives the final schedule for the various tasks in the optimal solution, if one exists. The 5 fields/columns are  'Job-index', 'machine-index', 'task-duration', 'start-time' and 'end-time'.</para></listitem></varlistentry>
   <varlistentry><term>status :</term>
      <listitem><para> Is is an integral value representing the status of the solution as:<itemizedlist><listitem> '0'-> 'Solution Found'</listitem><listitem> '1'-> 'Timed-out' - No solution was found within the specified/default time limit.</listitem><listitem> '2'-> 'Problem-Infeasible' - No solution exists for the given problem.</listitem></itemizedlist></para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
<latex>
\text{The Job-Shop Scheduling Problem (also called the \textbf{Resource Scheduling Problem}) is a linear optimization problem in Computer Science and Operations Research which vies to schedule a number of jobs, each composed of one or more tasks, on a specific number of machines, minimizing the total time for the enite schedule, called the \textbf{makespan}.\\The order in which the various tasks in a job are performed and the machines on which they must be scheduled are received as inputs.\\This particular implementation supports two variations :}\\
\text{}\\
\text{1. \textbf{`Sequential Mode'}(mode 0) : In this mode, all the tasks in a job are considered to be sequentially constrained ie. task 2 cannot occur before task 1 finishes, and so on.}\\
\text{2. \textbf{`Parallel/Arbitrary Mode'}(mode 1) : In this mode, tasks within a job can occur parallelly ie. the order is arbitrary sans 2 \textbf{optional bounds}. \\These 2 ``bound'' values are specified for each task. They are :}\\
\qquad\text{ - \textbf{`start-after'} : This is the index of the task that must finish before the current task can start}\\
\qquad\text{ - \textbf{`end-before'} :  This is the index of the task that cannot start before the current task finishes}\\
\text{}\\
\text{}\\
\text{}\\
\text{\textbf{\underline{MATHEMATICAL\textbf{ }STATEMENT} :}}\\
\text{}\\
\text{}\\
\text{}\\
</latex>
   </para>
   <para>
<latex>
\begin{math}
\text{Let } M = \{M_{1}, M_{2},..., M_{m}\} \text{ and} \\
\text{Let } J = \{J_{1}, J_{2},..., J_{j}\} \quad \text{be 2 finite sites representing the machines and the jobs respectively. }\\\\
\end{math}
\text{(the tasks are abstracted for simplicity. So whenever a Job is scheduled on a machine, it is assumed, the next task to be performed is the one scheduled).}\\\\
\begin{math}
\text{Let } X \text{ denote the set of assignment of all jobs on the machines}\\\\
\text{Let } C \text{ be the \textbf{`cost function'} such that :}\\
\text{}\\
C:X \to [0, \infty^{+}] \quad \text{; which denotes the total processing time ie. makespan of schedule.}\\\\
\textbf{\underline{Objective} :}\qquad \text{ To find an assignment of jobs }x \in X \text{ for which } C(x) \text{ is minimum, ie.}\\\\
\text{ } \qquad \hspace{3em} \qquad \text{ } \text{ No }y \in X \text{ exists, such that } C(y) &lt; C(x).\\
\end{math}
\text{}\\
\text{}\\
\text{}\\
</latex>
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//INPUT :

machines = 3;

jobs = 3;

jssp_mode = 0;

tasks=[    1 1 3;
1 2 2;
1 3 2;
2 1 2;
2 3 1;
2 2 4;
3 2 4;
3 3 3;
];

[makespan, schedule, status] = jssp(machines, jobs, jssp_mode, tasks, []);

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//INPUT:

machines = 2;

jobs = 5;

jssp_mode = 0;

tasks = [1 1 13;
1 2 3;
2 1 2;
2 2 5;
3 1 1;
3 2 3;
4 1 4;
4 2 6;
5 1 5;
5 2 7];

[makespan, schedule, status] = jssp (machines, jobs, jssp_mode, tasks, []);
   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Samuel Wilson</member>
   </simplelist>
</refsection>
</refentry>
