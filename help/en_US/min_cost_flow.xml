<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from min_cost_flow.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="min_cost_flow" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>min_cost_flow</refname>
    <refpurpose>Solves problem with finding minimum cost of flow</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   [cost, flow] = min_cost_flow(kNumSources, kNumTargets, kCost, kCapacity, kSupply, kDemand)
   [cost, flow, status] = min_cost_flow(kNumSources, kNumTargets, kCost, kCapacity, kSupply, kDemand)
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>kNumSources :</term>
      <listitem><para> a double, Number of Sources / Suppliers</para></listitem></varlistentry>
   <varlistentry><term>kNumTargets :</term>
      <listitem><para> a double, Number of Targets / Demanders</para></listitem></varlistentry>
   <varlistentry><term>kCost :</term>
      <listitem><para> a matrix of double, kNumSources x kNumTargets, represents Cost of flow from a Source to Target</para></listitem></varlistentry>
   <varlistentry><term>kCapacity :</term>
      <listitem><para> a matrix of double, kNumSources x kNumTargets, represents Capacity of flow from a Source to Target</para></listitem></varlistentry>
   <varlistentry><term>kSupply :</term>
      <listitem><para> a vector of double, length kNumSources, contains Supply Quantity of Suppliers</para></listitem></varlistentry>
   <varlistentry><term>kDemand :</term>
      <listitem><para> a vector of double, length kNumTargets, contains Demand Quantity of Demanders</para></listitem></varlistentry>
   <varlistentry><term>cost :</term>
      <listitem><para> a double, Optimal (minimum) Cost</para></listitem></varlistentry>
   <varlistentry><term>flow :</term>
      <listitem><para> a matrix of double, kNumSources x kNumTargets, represents Optimal Flow for the Problem</para></listitem></varlistentry>
   <varlistentry><term>status :</term>
      <listitem><para> contains the exit flag of Solver. See below</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Find the minimum cost and flow for a given set of sources and targets with limit on capacity per flow
   </para>
   <para>
The routine uses Google ORtools for solving the quadratic problem, ORtools is a library written in C++.
   </para>
   <para>
<latex>
\text{}\\
\begin{align}
&amp; \text{minimize} &amp;&amp; \texttt{kCost}\text{ . }\texttt{flow}\\
&amp; \text{subject to} &amp;&amp; \texttt{flow}_{ij} \leq \texttt{kSupply}_i \\
&amp;&amp;&amp; \texttt{flow}_{ij} \geq \texttt{kDemand}_j \\
&amp;&amp;&amp; \texttt{flow}_{ij} \leq \texttt{kCapacity}_{ij} \\
&amp;&amp;&amp; \sum_{i=1}^{\texttt{kNumSources}} \texttt{kSupply}_i = \sum_{j=1}^{\texttt{kNumTargets}} \texttt{kDemand}_j
\end{align}\\
\text{}\\
\text{}\\
\text{}\\
</latex>
   </para>
   <para>
The status allows to know the status of the optimization which is given back by ORtools.
<itemizedlist>
<listitem>status=0 : Not Solved</listitem>
<listitem>status=1 : Optimal</listitem>
<listitem>status=2 : Feasible</listitem>
<listitem>status=3 : Infeasible</listitem>
<listitem>status=4 : Unbalanced</listitem>
<listitem>status=5 : Bad Result</listitem>
</itemizedlist>
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Ref : Example 2 :
//http://www.yourarticlelibrary.com/ergonomics/operation-research/checking-for-optimality-transportation-problem/34743/

// Before balancing (Infeasible):
//    kNumSources = 4;
//    kNumTargets = 4;
//    kCost = [4, 6, 8, 13; 13, 11, 10, 8; 14, 4, 10, 13; 9, 11, 13, 8];
//    kCapacity = [200, 200, 200, 200; 200, 200, 200, 200; 200, 200, 200, 200; 200, 200, 200, 200];
//    kSupply = [50, 70, 30, 50];
//    kDemand = [25, 35, 105, 20];
//    [cost, flow, status] = min_cost_flow(kNumSources, kNumTargets, kCost, kCapacity, kSupply, kDemand);

// After balancing (Optimal):
kNumSources = 4;
kNumTargets = 5;
kCost = [4, 6, 8, 13, 0; 13, 11, 10, 8, 0; 14, 4, 10, 13, 0; 9, 11, 13, 8, 0];
kCapacity = [200, 200, 200, 200, 200; 200, 200, 200, 200, 200; 200, 200, 200, 200, 200; 200, 200, 200, 200, 200];
kSupply = [50, 70, 30, 50];
kDemand = [25, 35, 105, 20, 15];
[cost, flow, status] = min_cost_flow(kNumSources, kNumTargets, kCost, kCapacity, kSupply, kDemand);
cost
flow
status

   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Souvik Das</member>
   </simplelist>
</refsection>
</refentry>
