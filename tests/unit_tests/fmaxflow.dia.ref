// Copyright (C) 2017 - IIT Bombay - FOSSEE
//
// Author:	Samuel Wilson
// Organization: FOSSEE, IIT Bombay
// Email: harpreet.mertia@gmail.com
//
// This file must be used under the terms of the CeCILL.
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at
// http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
// <-- JVM NOT MANDATORY -->
// <-- ENGLISH IMPOSED -->
//
// assert_close --
//   Returns 1 if the two real matrices computed and expected are close,
//   i.e. if the relative distance between computed and expected is lesser than epsilon.
// Arguments
//   computed, expected : the two matrices to compare
//   epsilon : a small number
//
function flag = assert_close ( computed, expected, epsilon )
  if expected==0.0 then
    shift = norm(computed-expected);
  else
    shift = norm(computed-expected)/norm(expected);
  end
//  if shift < epsilon then
//    flag = 1;
//  else
//    flag = 0;
//  end
//  if flag <> 1 then bugmes();quit;end
    flag = assert_checktrue ( shift < epsilon );
endfunction
//
// assert_equal --
//   Returns 1 if the two real matrices computed and expected are equal.
// Arguments
//   computed, expected : the two matrices to compare
//   epsilon : a small number
//
//function flag = assert_equal ( computed , expected )
//  if computed==expected then
//    flag = 1;
//  else
//    flag = 0;
//  end
//  if flag <> 1 then bugmes();quit;end
//endfunction
//A simple max-flow problem(has optimal solution). Ref : https://developers.google.com/optimization/flow/maxflow
//Defining the graph(3 vectors)
start_nodes = [0, 0, 0, 1, 1, 2, 2, 3, 3];
end_nodes = [1, 2, 3, 2, 4, 3, 4, 2, 4];
capacities = [20, 30, 10, 40, 30, 10, 20, 5, 20];
//Specifying the source and target nodes for the max-flow solution
st=[0, 4];
//calling the scilab routine
[maxflow,arcflows,status]=fmaxflow(start_nodes,end_nodes,capacities,st);
Max flow = 60
Arc	Flow	Capacity
0->1	20	20
0->2	30	30
0->3	10	10
1->2	0	40
1->4	20	30
2->3	10	10
2->4	20	20
3->2	0	5
3->4	20	20

An optimal solution was found
assert_checkequal(maxflow,int32(60));
assert_checkequal(arcflows,int32([20 30 10 0 20 10 20 0 20]));
assert_checkequal(status,int32(0));
printf("\nTest Successful!\n");

Test Successful!
